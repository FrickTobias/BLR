from snakemake.utils import validate

configfile: "blr.yaml"
validate(config, "config.schema.yaml")

# Import rules for trimming fastq files.
include: "rules/trim.smk"

# Import rules for phasing
include: "rules/phasing.smk"


rule final:
    input: "reads.1.final.fastq.gz", "reads.2.final.fastq.gz"


rule starcode_clustering:
    # Cluster DBS barcodes using starcode
    output:
        "barcodes.clstr"
    input:
        "barcodes.fasta.gz"
    threads: 20
    log: "starcode_clustering.log"
    shell:
        "pigz -cd {input} |"
        " starcode"
        " -o {output}"
        " -t {threads}"
        " -d {config[barcode_max_dist]}"
        " --print-clusters"
        " 2> {log}"


rule map_reads:
    output:
        bam = "mapped.sorted.bam"
    input:
        r1_fastq = "trimmed.barcoded.1.fastq.gz",
        r2_fastq = "trimmed.barcoded.2.fastq.gz"
    threads: 20
    log: "read_mapping.log"
    run:
        commands = {
            "bwa":
                "bwa mem"
                " -t {threads}"
                " {config[genome_reference]}"
                " {input.r1_fastq}"
                " {input.r2_fastq}",
            "bowtie2":
                "bowtie2"
                " -p {threads}"
                " --reorder"
                " --maxins 2000"
                " -x {config[genome_reference]}"
                " -1 {input.r1_fastq}"
                " -2 {input.r2_fastq}",
            "minimap2":
                "minimap2"
                " -ax sr"
                " -t {threads}"
                " {config[genome_reference]}"
                " {input.r1_fastq}"
                " {input.r2_fastq}",
        }
        command = commands[config["read_mapper"]].format(**locals(), **globals())

        # Add duplicate marking to map_reads pipe if samblaster selected.
        mkdup = "samblaster |" if config["duplicate_marker"] == "samblaster" else ""

        shell(
            "{command} 2> >(tee {log} >&2) |"
            "{mkdup}"
            "samtools sort -"
            " -@ {threads}"
            " -O BAM > {output.bam}"
        )


rule tagbam:
    # Add barcodes to BAM
    output:
        bam = "mapped.sorted.tag.mkdup.bam" if config['duplicate_marker'] == 'samblaster' else "mapped.sorted.tag.bam"
    input:
        bam = "mapped.sorted.bam"
    log: "tag_bam.stderr"
    shell:
        "blr tagbam"
        " {input.bam}"
        " -o {output.bam}"
        " -t {config[cluster_tag]} {config[sequence_tag]} 2> {log}"


rule mark_duplicates:
    output:
        bam = "mapped.sorted.tag.mkdup.bam"
    input:
        bam = "mapped.sorted.tag.bam"
    log: "mark_duplicates.log"
    threads: 20
    shell:
        "sambamba markdup"
        " -t {threads}"
        " {input.bam}"
        " {output.bam} 2> {log}"


rule clusterrmdup:
    # Removes cluster duplicates and indexes output
    output:
        bam = "mapped.sorted.tag.mkdup.bcmerge.bam",
        merges = "barcode-merges.csv"
    input:
        bam = "mapped.sorted.tag.mkdup.bam"
    log: "clusterrmdup.log"
    shell:
        "blr clusterrmdup"
        " {input.bam}"
        " {output.merges}"
        " -o {output.bam}"
        " -b {config[cluster_tag]} 2>> {log}"


rule buildmolecules:
    # Groups reads into molecules depending on their genomic position and barcode
    output:
        bam = "mapped.sorted.tag.mkdup.bcmerge.mol.bam",
        stats = expand("{stat}.tsv", stat=['molecules_per_bc', 'molecule_stats'])
    input:
        bam = "mapped.sorted.tag.mkdup.bcmerge.bam"
    log: "buildmolecules.log"
    shell:
        "blr buildmolecules"
        " {input.bam}"
        " -o {output.bam}"
        " --stats-files"
        " -m {config[molecule_tag]}"
        " -n {config[num_mol_tag]}"
        " -b {config[cluster_tag]}"
        " 2> {log}"


rule filterclusters:
    # Filter clusters based on parameters
    output:
        bam = "mapped.sorted.tag.mkdup.bcmerge.mol.filt.bam",
        bai = "mapped.sorted.tag.mkdup.bcmerge.mol.filt.bam.bai"
    input:
        bam = "mapped.sorted.tag.mkdup.bcmerge.mol.bam"
    log: "filterclusters.log"
    shell:
        "blr filterclusters"
        " {input.bam}"
        " -m {config[molecule_tag]}"
        " -n {config[num_mol_tag]}"
        " -b {config[cluster_tag]}"
        " -M {config[max_molecules_per_bc]}"
        " 2>> {log} |"
        " tee {output.bam} |"
        " samtools index  - {output.bai}"


rule bam_to_fastq:
    # Convert final BAM file to FASTQ files for read 1 and 2
    output:
        r1_fastq = "reads.1.final.fastq.gz",
        r2_fastq = "reads.2.final.fastq.gz"
    input:
        bam = "mapped.sorted.tag.mkdup.bcmerge.mol.filt.bam"
    log: "samtools-fastq.log"
    threads: 20
    shell:
        "samtools fastq"
        " -@ {threads}"
        " -T {config[cluster_tag]},{config[sequence_tag]}"
        " {input.bam}"
        " -1 {output.r1_fastq}"
        " -2 {output.r2_fastq} 2>> {log}"


if config["reference_variants"]:
    rule link:
        output: "reference.vcf"
        shell:
            "ln -s {config[reference_variants]} {output}"
else:
    rule call_variants_freebayes:
        output:
             vcf = "reference.vcf"
        input:
             bam = "mapped.sorted.tag.mkdup.bcmerge.mol.filt.bam"
        log: "call_variants_freebayes.log"
        shell:
             "freebayes"
             " -f {config[genome_reference]}"
             " {input.bam} 1> {output.vcf} 2> {log}"
